@using Finance.Expensia.Shared.Enums
@{
	var ddlTransactionTypeUrl = Url.Action("RetrieveTransactionTypeDatas", "TransactionType");
	var ddlCompanyUrl = Url.Action("RetrieveCompanyDatas", "Company");
	var ddlBankAliasUrl = Url.Action("RetrieveBankAlias", "BankAlias");
	var ddlPartnerUrl = Url.Action("RetrievePartner", "Partner");
	var ddlCoaUrl = Url.Action("RetrieveCoa", "Coa");
	var ddlCostCenterUrl = Url.Action("RetrieveCostCenter", "CostCenter");
	var ddlOutgoingPaymentTagging = Url.Action("RetrieveOutgoingPaymentTagging", "OutgoingPayment");

	var uploadFileUrl = Url.Action("UploadFile", "Storage");
	var downloadFileUrl = Url.Action("DownloadFile", "Storage");

	var detailOutgoingPaymentUrl = Url.Action("GetDetailOutgoingPayment", "OutgoingPayment");
	var createOutgoingPaymentUrl = Url.Action("CreateOutgoingPayment", "OutgoingPayment");
	var editOutgoingPaymentUrl = Url.Action("EditOutgoingPayment", "OutgoingPayment");
	var deleteOutgoingPaymentUrl = Url.Action("DeleteOutgoingPayment", "OutgoingPayment");
	var cancelOutgoingPaymentUrl = Url.Action("CancelOutgoingPayment", "OutgoingPayment");

	var getHistoryApproval = Url.Action("GetListApprovalHistory", "Mailbox");
	
	var outgoingPaymentHomePageUrl = Url.Action("Index", "OutgoingPayment", new { area = "Core" });
	var createOutgoingPaymentPageUrl = Url.Action("Create", "OutgoingPayment", new { area = "Core" });
}

<script type="text/javascript">
	const contextRequestPath = '@Context.Request.Path';
	const createPath = '@Url.Action("Create", "OutgoingPayment")', detailPath = '@Url.Action("Detail", "OutgoingPayment")', editPath = '@Url.Action("Edit", "OutgoingPayment")';

	const gridOutgoingPaymentDetail = $('#gridOutgoingPaymentDetail');

	const dtRequestDate = $("#dtRequestDate"), dtScheduledDate = $("#dtScheduledDate");

	const ddlTransactionType = $('#ddlTransactionType'), ddlCompany = $("#ddlCompany"), ddlFromAliasBank = $("#ddlFromAliasBank"), ddlToAliasBank = $("#ddlToAliasBank");
	const ddlExpectedTransfer = $('#ddlExpectedTransfer');

	const txtTransactionNo = $('#txtTransactionNo'), txtDocumentStatus = $('#txtDocumentStatus'), txtRequestor = $("#txtRequestor"), txtTotalAmount = $("#txtTotalAmount");
	const txtRemark = $("#txtRemark"), txtFromBankName = $("#txtFromBankName"), txtToBankName = $("#txtToBankName");

	const btnSubmit = $("#btnSubmit"), btnDraft = $("#btnDraft"), btnDelete = $("#btnDelete"), btnHistory = $("#btnHistory"), btnCancel = $("#btnCancel"), btnCopy = $("#btnCopy");

	const divTag = $('#dvListTag'), divHistory = $("#dvHistoryApproval");

	let indexRowEdit = -1, totalAmount = 0, outgoingPaymentId = null;
	let ddlPartnerDatas, ddlCoaDatas, ddlCostCenterDatas, ddlCompanyDatas;
	const formMode = window.location.href.split('/')[5];

	$(function () {
		OutgoingPaymentFormManager = new OutgoingPaymentFormManager();
		OutgoingPaymentFormManager.InitManagement();
	});

	function OutgoingPaymentFormManager() {
		return {
			InitManagement: function () {
				this.InitControls();
				this.InitHandlers();
				this.InitValidation();
				this.InitLoad();
			},
			InitControls: function () {
				gridOutgoingPaymentDetail.dataTable({
					ordering: false,
					paging: false,
					searching: false,
					info: false,
					scrollX: true,
					initComplete: function (settings, json) {
						$('.dt-scroll-head').css({ visibility: 'collapse' });
					},
					language: {
						emptyTable: 'Belum ada data'
					},
					columns: [
						{
							data: "invoiceDate",
							title: "Date",
							type: "date",
							width: "140px",
							render: function (data, type, row, meta) {
								if (data == "") return "";

								var value = new Date(data).toISOString().split('T')[0];

								if (meta.row == indexRowEdit) {
									return (
										`<div class="input-group">
											<input type="text" class="form-control" id="dtInvoiceDate" autocomplete="off" value=` + value + `>
											<div class="input-group-append">
												<span class="input-group-text">
													<i class="fa fa-calendar"></i>
												</span>
											</div>
										</div>`);
								}

								return value;
							}
						},
						{
							data: "partner",
							title: "Tenant",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<select class="form-control select2" id="ddlPartner"></select>
										</div>`);
								}

								return data.partnerName;
							}
						},
						{
							data: "description",
							title: "Description",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<textarea id="txtDescription" rows="3" class="form-control form-control-area" value="` + data + `"></textarea>
										</div>`);
								}

								return data;
							}
						},
						{
							data: "coa",
							title: "CoA",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<select class="form-control select2" id="ddlCoa"></select>
										</div>`);
								}

								return data.accountCode
							}
						},
						{
							data: "costCenter",
							title: "Customer",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<select class="form-control select2" id="ddlCostCenter"></select>
										</div>`);
								}

								return data.costCenterCode
							}
						},
						{
							data: "postingAccount",
							title: "Consumer Account",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<select class="form-control select2" id="ddlPostingAccount"></select>
										</div>`);
								}

								return data.postingAccountName;
							}
						},
						{
							data: "amount",
							title: "Amount",
							width: "150px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
											<input type="text" class="form-control" id="txtAmount" value="` + fmtMoney(data) + `" onkeydown="return numbersonly(this, event);"/>
										</div>`);
								}

								return fmtMoney(data);
							}
						},
						{
							data: "attachments",
							title: "File",
							width: "200px",
							render: function (data, type, row, meta) {
								if (Array.isArray(data)) {
									let badge = ``;

									data.forEach(function (e, i, a) {
										badge = badge +
											`<span class="badge badge-success mr-1 mb-1 p-0">
												<a class="btn btn-xs text-white">
													<span
														class="download-file"
														data-file-url="` + e.fileUrl + `"
														data-content-type="` + e.contentType + `"
														data-file-name="` + e.fileName + `">` +
														e.fileName +
													`</span>
												</a>`;

										if (meta.row == indexRowEdit) {
											badge = badge +
												`<a class="btn btn-xs text-white border-left pl-1">
													<i class="fas fa-times" data-index="` + i + `"></i>
												</a>`;
										}
										else {
											badge = badge +
												`<a class="btn btn-xs text-white border-left pl-1">
													<i class="fas fa-eye" data-file-url="` + e.fileUrl + `"
														data-content-type="` + e.contentType + `"
														data-file-name="` + e.fileName + `">` +
													`</i>
												</a>`;
										}

										badge = badge +
											`</span>`;
									});

									return badge + `</div>`;
								}

								return ``;
							}
						},
						{
							data: "id",
							title: "Action",
							width: "40px",
							visible: formMode === 'Detail' ? false : true,
							render: function (data, type, full, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<a class="btn pr-0 pl-0 mr-2"><i data-row-index="` + meta.row + `" class="fas fa-save"></i></a>
										<a class="btn pr-0 pl-0"><i data-row-index="` + meta.row + `" class="fas fa-upload"></i></a>
										<input type="file" id="fiUpload" accept=".pdf,.xlsx,.docx,.pptx,image/*" style="display: none;">`);
								}

								return (
									`<a class="btn pr-0 pl-0 mr-2"><i data-row-index="` + meta.row + `" class="fas fa-edit"></i></a>
									<a class="btn pr-0 pl-0"><i data-row-index="` + meta.row + `" class="fas fa-trash"></i></a>`);
							}
						}
					],
					layout: {
						top1End: function () {
							let toolbar = document.createElement('div');
							let buttons = formMode === 'Detail' ? `` : `<button id="btnAddDetail" class="btn btn-sm btn-outline-primary mr-2 ml-2">Add Detail</button>`
							toolbar.innerHTML = buttons;

							return toolbar;
						}
					},
					"fnDrawCallback": function () {
						gridOutgoingPaymentDetail.find(".select2").select2();
					},
				});

				dtRequestDate.datepicker({
					dateFormat: "yy-mm-dd",
					disabled: true
				});
				dtRequestDate.datepicker("setDate", new Date())

				dtScheduledDate.datepicker({
					dateFormat: "yy-mm-dd",
					// beforeShowDay: function (date) {
					// 	let effectiveDate = new Date();
					// 	let deltaEffectiveDate = 2

					// 	if (effectiveDate.getDay() >= 3 && effectiveDate.getDay() <= 5)
					// 		deltaEffectiveDate += 2
					// 	else if (effectiveDate.getDay() == 6)
					// 		deltaEffectiveDate += 1

					// 	effectiveDate.setDate(effectiveDate.getDate() + deltaEffectiveDate)

					// 	if (date < effectiveDate)
					// 		return [false, '']
					// 	else
					// 		return [true, '']
					// },
					disabled: true
				});

				$("#txtTagging").autocomplete({
					source: function (request, response) {
						$.ajax(Object.assign({}, glbBaseRequest, {
							method: "POST",
							url: "@ddlOutgoingPaymentTagging",
							data: JSON.stringify({
								"page": 1,
								"pageSize": 10,
								"searchKey": $("#txtTagging").val()
							})
						})).done(function (data) {
							if (data.succeeded) {
								const suggestions = data.obj.map(item => item.tagValue);
								response(suggestions);
							}
							else {
								response([]);
							}
						});
					},
					minLength: 2,
					select: function (event, ui) {
						const divTag = $('#dvListTag');
						var inputValue = ui.item.value;
						let listhtml = `<span name="tagSpan" class="badge badge-pill badge-outlined-success font-weight-normal mr-2 mb-2" style="padding: 0.25em 0.75em;" data-value="${inputValue}">${inputValue}
											<a class="btn btn-xs text-success pl-1" style="padding: 0.025rem 0.15rem;">
												<i class="fas fa-times" name="deleteSpan" data-value="${inputValue}"></i>
											</a>
										</span>`;
						divTag.append($(listhtml));
						setTimeout(() => {
							$(this).val('');
						}, 100);
					}
				});
			},
			InitHandlers: function () {
				ddlCompany.on("change", async function (e) {
					ddlFromAliasBank.removeAttr("disabled");
					await RefreshDdlBankAlias(ddlFromAliasBank);
					await LoadDdlPartnerData();
					await LoadDdlCoaData();
					await LoadDdlCostCenterData();

					$(this).attr("disabled", true);
				});

				ddlExpectedTransfer.on("change", function (e) {
					if (ddlExpectedTransfer.val() == "@ExpectedTransfer.Scheduled") {
						dtScheduledDate.datepicker('option', 'disabled', false);
					}
					else {
						dtScheduledDate.datepicker('option', 'disabled', true);
						dtScheduledDate.val('');
					}
				});

				ddlFromAliasBank.add(ddlToAliasBank).on("change", function (e) {
					const ddl = $(this);
					const descriptorControl = $(ddl.attr("descriptor-control"));
					const optionSelected = ddl.find(':selected');
					const bankName = optionSelected.attr("data-bank-name");
					const accountNo = optionSelected.attr("data-account-no");
					const accountName = optionSelected.attr("data-account-name");

					descriptorControl.val(
`Bank Name : ` + bankName + `
Account Name : ` + accountName + `
Account No : ` + accountNo);
				});

				$("#btnAddDetail").on("click", function (e) {
					if (ValidateAllowModifyDetail()) {
						const initialOutgoingPaymentDetail = {
							"id": null,
							"invoiceDate": fmtDate2(new Date()),
							"partner": {
								"partnerId": "",
								"partnerName": ""
							},
							"postingAccount": {
								"postingAccountId": "",
								"postingAccountName": ""
							},
							"description": "",
							"coa": {
								"coaId": "",
								"accountCode": ""
							},
							"costCenter": {
								"costCenterId": "",
								"costCenterCode": ""
							},
							"amount": 0,
							"attachments": []
						};

						gridOutgoingPaymentDetail.api().row.add(initialOutgoingPaymentDetail)
						indexRowEdit = gridOutgoingPaymentDetail.api().rows()[0][gridOutgoingPaymentDetail.api().rows()[0].length - 1];
						gridOutgoingPaymentDetail.api().draw();

						AfterEditDetail(initialOutgoingPaymentDetail);
					}
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-edit", function (e) {
					if (ValidateAllowModifyDetail()) {
						indexRowEdit = parseInt($(this).attr('data-row-index'));
						let data = gridOutgoingPaymentDetail.api().row(indexRowEdit).data();

						gridOutgoingPaymentDetail.api().row(indexRowEdit).data(data);
						gridOutgoingPaymentDetail.api().draw();
						AfterEditDetail(data);

						totalAmount = totalAmount - parseInt(data.amount);
					}
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-trash", function (e) {
					let indexRowDelete = parseInt($(this).attr('data-row-index'));

					Swal.fire({
						title: "Hapus Data",
						html: "Apakah anda yakin ingin meghapus data ini?",
						showCancelButton: true,
						confirmButtonText: "Hapus",
						confirmButtonColor: "#D92D20",
						customClass: {
							actions: 'my-actions',
							cancelButton: 'order-1 right-gap',
							confirmButton: 'order-2',
						},
						icon: "warning"
					}).then((result) => {
						if (result.isConfirmed) {
							let data = gridOutgoingPaymentDetail.api().row(indexRowDelete).data();

							gridOutgoingPaymentDetail.api().row(indexRowDelete).remove().draw();

							totalAmount = totalAmount - data.amount;
							txtTotalAmount.val(fmtMoney(totalAmount));
						}
					});
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-save", function (e) {
					let indexRowSave = indexRowEdit;
					let attachments = gridOutgoingPaymentDetail.api().row(indexRowSave).data().attachments;
					let updateData = {
						"id": gridOutgoingPaymentDetail.api().row(indexRowSave).data().id,
						"invoiceDate": $('#dtInvoiceDate').val(),
						"postingAccount": {
							"postingAccountId": $('#ddlPostingAccount').val(),
							"postingAccountName": $('#ddlPostingAccount option:selected').text()
						},
						"partner": {
							"partnerId": $('#ddlPartner').val(),
							"partnerName": $('#ddlPartner option:selected').text()
						},
						"description": $('#txtDescription').val(),
						"coa": {
							"coaId": $('#ddlCoa').val(),
							"accountCode": $('#ddlCoa option:selected').text()
						},
						"costCenter": {
							"costCenterId": $('#ddlCostCenter').val(),
							"costCenterCode": $('#ddlCostCenter option:selected').text()
						},
						"amount": parseInt($('#txtAmount').val().replace(/\./g, "")),
						"attachments": attachments
					}

					indexRowEdit = -1;
					gridOutgoingPaymentDetail.api().row(indexRowSave).data(updateData);
					totalAmount = totalAmount + updateData.amount;

					txtTotalAmount.val(fmtMoney(totalAmount));
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-upload", function (e) {
					$("#fiUpload").click();
				});

				gridOutgoingPaymentDetail.on("click", "td .download-file", function (e) {
					let $el = $(this);

					let request = JSON.parse(JSON.stringify(glbBaseRequest));
					request.method = "POST";
					request.url = "@downloadFileUrl";
					request.processData = false;
					request.contentType = false;
					request.xhrFields = {
						responseType: 'blob'
					};
					request.data = JSON.stringify({
						fileName: $el.attr('data-file-name'),
						fileUrl: $el.attr('data-file-url'),
						contentType: $el.attr('data-content-type')
					});

					$.ajax(request).done(function (data, textStatus, jqXHR) {
						var filename = $el.attr('data-file-name');
						var blob = new Blob([data], { type: $el.attr('data-content-type') });
						var a = document.createElement('a');
						a.href = window.URL.createObjectURL(blob);
						a.download = filename;
						document.body.appendChild(a);
						a.click();
						document.body.removeChild(a);
						window.URL.revokeObjectURL(a.href);
					})
						.fail(function (jqXHR, textStatus, errorThrown) {
							Swal.fire({
								title: "Error",
								text: `Data tidak ditemukan`,
								icon: "error"
							});
						});
				});

				gridOutgoingPaymentDetail.on("change", "#fiUpload", function (e) {
					let $el = $(this)
					let file = $el[0].files[0];

					let formData = new FormData();
					formData.append('file', file, file.name);

					let request = JSON.parse(JSON.stringify(glbBaseRequest));
					request.method = "POST";
					request.url = "@uploadFileUrl";
					request.processData = false;
					request.contentType = false;
					request.data = formData;

					delete request.headers["Content-Type"];

					$.ajax(request).done(function (response) {
						if (response.succeeded) {
							let temporaryData = GetTemporaryData();

							let data = gridOutgoingPaymentDetail.api().row(indexRowEdit).data();
							data.attachments.push(response.obj);
							gridOutgoingPaymentDetail.api().row(indexRowEdit).data(data);

							AfterEditDetail(temporaryData);

							$el.val('');
						}
						else {
							Swal.fire({
								title: "Error",
								text: response.message,
								icon: "error"
							});
						}
					});
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-times", function (e) {
					let temporaryData = GetTemporaryData();

					let data = gridOutgoingPaymentDetail.api().row(indexRowEdit).data();
					let index = parseInt($(this).attr("data-index"));

					data.attachments.splice(index, 1);

					gridOutgoingPaymentDetail.api().row(indexRowEdit).data(data);

					AfterEditDetail(temporaryData);
				});

				gridOutgoingPaymentDetail.on("click", "td .fas.fa-eye", function (e) {
					let $el = $(this);
					let filename = $el.attr('data-file-name');
					let request = JSON.parse(JSON.stringify(glbBaseRequest));
					const notformats = ['xlsx', 'docx', 'pptx'];

					const divView = document.getElementById("divAttachment");

					request.method = "POST";
					request.url = "@downloadFileUrl";
					request.processData = false;
					request.contentType = false;
					request.xhrFields = {
						responseType: 'blob'
					};
					request.data = JSON.stringify({
						fileName: $el.attr('data-file-name'),
						fileUrl: $el.attr('data-file-url'),
						contentType: $el.attr('data-content-type')
					});

					$.ajax(request).done(function (data, textStatus, jqXHR) {
						var filename = $el.attr('data-file-name');
						var blob = new Blob([data], { type: $el.attr('data-content-type') });
						const file = new File([blob], 'attach.pdf', { type: blob.type });
						let isFile = file;
						const reader = new FileReader();
						let parts = filename.split('.');
						let format = parts[parts.length - 1];
						if (format.toLowerCase() == 'pdf') {
							$('#mdViewAttachment').modal('show');
							$("#modalTitle").text('PDF Viewer');

							reader.onload = function (event) {
								const base64PDF = event.target.result.split(',')[1];
								const embedElement = document.createElement("embed");
								embedElement.setAttribute("src", "data:application/pdf;base64," + base64PDF);
								embedElement.setAttribute("type", "application/pdf");
								embedElement.setAttribute("width", "100%");
								embedElement.setAttribute("height", "600");
								divView.innerHTML = "";
								divView.appendChild(embedElement);
							};
						}
						else if (notformats.includes(format.toLowerCase())) {
							Swal.fire({
								title: "Error",
								text: `format ${format} tidak dapat di lihat langsung, silahkan untuk mendownload file tersebut`,
								icon: "error"
							});
						}
						else {
							$('#mdViewAttachment').modal('show');
							$("#modalTitle").text('Image Viewer');
							reader.onload = function (event) {
								const base64Image = event.target.result;

								const imgElement = document.createElement("img");
								imgElement.setAttribute("src", base64Image);
								imgElement.setAttribute("width", "100%");

								divView.innerHTML = ""; // Bersihkan isi div sebelum menambahkan elemen gambar
								divView.appendChild(imgElement);
							};
						}
						reader.readAsDataURL(isFile);
					});
				});

				btnSubmit.add(btnDraft).on("click", function (e) {
					let $el = $(this);
					let isSubmit = $el.attr('data-is-submit');
					let disabledElement = $('input:disabled').add('select:disabled');

					disabledElement.removeAttr('disabled');
					let formDataArray = $('.card-body :input').serializeArray();
					disabledElement.attr('disabled', true);

					let formDataObject = {};
					formDataObject.id = outgoingPaymentId;
					formDataArray.forEach(function (field) {
						if (field.name == "scheduledDate" && field.value == "") {
							return;
						}

						formDataObject[field.name] = field.value;
					});
					formDataObject.isSubmit = isSubmit == 'true' ? true : false;
					formDataObject.outgoingPaymentDetails = [];
					formDataObject.outgoingPaymentTaggings = [];

					let dataOutgoingPaymentDetails = gridOutgoingPaymentDetail.api().data().toArray();
					if (dataOutgoingPaymentDetails.length > 0) {
						dataOutgoingPaymentDetails.forEach(function (v, i, a) {
							formDataObject.outgoingPaymentDetails.push({
								id: v.id,
								invoiceDate: v.invoiceDate == "" ? "0001-01-01T00:00:00" : v.invoiceDate,
								partnerId: v.partner.partnerId == "" ? "00000000-0000-0000-0000-000000000000" : v.partner.partnerId,
								description: v.description,
								chartOfAccountId: v.coa.coaId,
								costCenterId: v.costCenter.costCenterId == "" ? "00000000-0000-0000-0000-000000000000" : v.costCenter.costCenterId,
								postingAccountId: v.postingAccount.postingAccountId,
								amount: parseInt(v.amount),
								outgoingPaymentDetailAttachments: v.attachments
							});
						});
					}

					$('[name="tagSpan"]').each(function () {
						formDataObject.outgoingPaymentTaggings.push({
							tagValue: $(this).data('value'),
						});
					});

					document.body.classList.remove('loaded');

					$.ajax(Object.assign({}, glbBaseRequest, {
						method: "POST",
						url: outgoingPaymentId == null ? "@createOutgoingPaymentUrl" : "@editOutgoingPaymentUrl",
						data: JSON.stringify(formDataObject),
						contentType: "application/json"
					})).done(function (response) {
						document.body.classList.add('loaded');
						if (response.succeeded) {
							Swal.fire({
								title: "Success",
								text: response.message,
								icon: "success"
							}).then(() => {
								window.location.href = "@outgoingPaymentHomePageUrl";
							});
						}
						else {
							Swal.fire({
								title: "Error",
								text: response.message,
								icon: "error"
							});
						}
					}).fail(function () {
						document.body.classList.add('loaded');
					})
				});

				btnDelete.on('click', function (e) {
					Swal.fire({
						title: "Hapus Data",
						html: "Apakah anda yakin ingin meghapus dokumen ini?",
						showCancelButton: true,
						confirmButtonText: "Hapus",
						confirmButtonColor: "#D92D20",
						customClass: {
							actions: 'my-actions',
							cancelButton: 'order-1 right-gap',
							confirmButton: 'order-2',
						},
						icon: "warning"
					}).then(async (result) => {
						if (result.isConfirmed) {
							var pathArray = window.location.pathname.split('/');

							await $.ajax(Object.assign({}, glbBaseRequest, {
								method: "POST",
								url: "@deleteOutgoingPaymentUrl" + "?outgoingPaymentId=" + pathArray[pathArray.length - 1]
							})).done(function (response) {
								if (response.succeeded) {
									Swal.fire({
										title: "Success",
										text: response.message,
										icon: "success"
									}).then(() => {
										window.location.href = "@outgoingPaymentHomePageUrl";
									});
								}
								else {
									Swal.fire({
										title: "Error",
										text: response.message,
										icon: "error"
									});
								}
							});
						}
					});
				});

				btnHistory.click(function () {
					let html;
					let bgstatus;
					let iconstatus;
					let remark;
					let dateHist;
					var reqBody = {
						'TransactionNo': transactionNo
					};

					$.ajax(Object.assign({}, glbBaseRequest, {
						method: "POST",
						url: "@getHistoryApproval",
						data: JSON.stringify(reqBody),
						contentType: "application/json",
						beforeSend: function () {
							html = '<div style="text-align: center;">' +
								'<i class="fa fa-spinner fa-spin fa-1x fa-fw"></i><span>Loading...</span>' +
								'</div>';
							divHistory.html(html);
						},
					})).done(function (response) {
						if (response.succeeded) {
							if (response.obj.length == 0) {
								html = '<div class="text-center"><span> Tidak ada history</span></div>';
								divHistory.html(html);
							}
							else {
								html = `<div class="col-md-12">
											<div class="timeline">`
								for (var item of response.obj) {
									dateHist = fmtDate3(item.created);
									var objIcon = bgIconHistory.find(function (bgitem) {
										return bgitem.key === item.approvalStatusText.toLowerCase();
									});

									bgstatus = objIcon ? objIcon.background : 'bg-grey';
									iconstatus = objIcon ? objIcon.icon : 'fa-dot-circle';

									remark = item.remark == '' ? '-' : item.remark;
									executorRoleCode = item.executorRoleCode == '' ? `` : `sebagai ${item.executorRoleCode}`

									html += `	<div>
													<i class="fa ${iconstatus} ${bgstatus}"></i>
													<div class="timeline-item">
														<span class="time">${dateHist}</span>
														<h3 class="timeline-header"><b>${item.approvalStatusText}</b> oleh <b>${item.executorName}</b> ${executorRoleCode}</h3>
														<div class="timeline-body">
															<i>Remark: </i>${remark}
														</div>
													</div>
												</div>`;
								}
								html += `	</div>
										</div>`;
								divHistory.html(html);
							}
						}
						else {
							let errhtml;
							errhtml = '<div style="text-align: center;">' +
								'<i class="fa fa-warning"></i><span> Data gagal untuk dimuat</span>' +
								'</div>';
							divHistory.html(errhtml);
						}
					});
				});

				btnCopy.on("click", function (e) {
					var pathArray = window.location.pathname.split('/');

					window.location.href = "@createOutgoingPaymentPageUrl" + "?outgoingPaymentId=" + pathArray[pathArray.length - 1];
				});

				btnCancel.on('click', function (e) {
					Swal.fire({
						title: "Pembatalan Dokumen",
						html: "Apakah anda yakin ingin membatalkan dokumen ini?",
						input: "textarea",
						inputAttributes: {
							autocapitalize: "off"
						},
						showCancelButton: true,
						confirmButtonText: "Iya",
						confirmButtonColor: "#D92D20",
						customClass: {
							actions: 'my-actions',
							cancelButton: 'order-1 right-gap',
							confirmButton: 'order-2',
						},
						icon: "warning",
						preConfirm: async (remark) => {
							if (remark == "") {
								Swal.showValidationMessage(`Keterangan harus diisi`);
							}
						}
					}).then(async (result) => {
						if (result.isConfirmed) {
							var pathArray = window.location.pathname.split('/');

							await $.ajax(Object.assign({}, glbBaseRequest, {
								method: "POST",
								url: "@cancelOutgoingPaymentUrl" + "?outgoingPaymentId=" + pathArray[pathArray.length - 1] + '&remark=' + result.value
							})).done(function (response) {
								if (response.succeeded) {
									Swal.fire({
										title: "Success",
										text: response.message,
										icon: "success"
									}).then(() => {
										window.location.href = "@outgoingPaymentHomePageUrl";
									});
								}
								else {
									Swal.fire({
										title: "Error",
										text: response.message,
										icon: "error"
									});
								}
							});
						}
					});
				});

				$("#txtTagging").keypress(function (event) {
					const divTag = $('#dvListTag');
					var inputValue = $("#txtTagging").val();
					if (event.which === 13) {
						let listhtml = `<span name="tagSpan" class="badge badge-pill badge-outlined-success font-weight-normal mr-2 mb-2" style="padding: 0.25em 0.75em;"  data-value="${inputValue}">${inputValue}
											<a class="btn btn-xs text-success pl-1" style="padding: 0.025rem 0.15rem;">
												<i class="fas fa-times" name="deleteSpan" data-value="${inputValue}"></i>
											</a>
										</span>`;
						divTag.append($(listhtml));
						$("#txtTagging").val('');
					}
				});

				$(document).on('click', '[name="deleteSpan"]', function () {
					$(this).closest('span').remove();
				});
			},
			InitValidation: function () {},
			InitLoad: async function () {
				await RefreshDdlTransactionType();
				await RefreshDdlCompany();
				await RefreshDdlBankAlias(ddlToAliasBank);

				if (contextRequestPath == createPath) {
					let urlParams = new URLSearchParams(window.location.search);
					let copyOutgoingPaymentId = urlParams.get('outgoingPaymentId');

					if (copyOutgoingPaymentId != null) {
						await LoadOutgoingPaymentDetailData(copyOutgoingPaymentId);
					}

					txtRequestor.val(localStorage.getItem('displayName'));
					txtTransactionNo.val('');
					txtDocumentStatus.val('');
					dtRequestDate.datepicker('setDate', new Date());
				}
				else {
					let pathArray = window.location.pathname.split('/');
					outgoingPaymentId = pathArray[pathArray.length - 1];
					await LoadOutgoingPaymentDetailData(outgoingPaymentId);

					if (contextRequestPath == detailPath)
						SetFormForView();

					if (contextRequestPath == editPath)
						SetFormForEdit();
				}
			}
		}
	}

	function SetFormForView() {
		btnHistory.prop('disabled', true);
		$('select').removeClass('select2');
		$("#btnloader").removeClass("d-none");
		$("#dvListTag").removeClass("mt-3");
		$('input:not(:disabled)').add('select:not(:disabled)').add('textarea:not(:disabled)').attr('disabled', true);
		$('#txtTagging').hide();

		btnHistory.prop('disabled', false);
		$("#btnloader").addClass("d-none");
	}
	
	function SetFormForEdit() {
		ddlTransactionType.prop('disabled', true);
	}

	async function LoadDdlPartnerData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlPartnerUrl"
		})).done(function (response) {
			if (response.succeeded) {
				ddlPartnerDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function LoadDdlCoaData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCoaUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlCoaDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function LoadDdlCostCenterData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCostCenterUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlCostCenterDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function RefreshDdlTransactionType() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlTransactionTypeUrl"
		})).done(function (response) {
			if (response.succeeded) {
				ddlTransactionType.empty().append(`<option value="">&nbsp</option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
					ddlTransactionType.append(`<option value="` + data.transactionTypeId + `">` + data.description + `</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function RefreshDdlCompany() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCompanyUrl"
		})).done(function (response) {
			if (response.succeeded) {
				ddlCompanyDatas = response.obj;
				ddlCompany.empty().append(`<option value="">&nbsp</option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
					ddlCompany.append(`<option value="` + data.companyId + `">` + data.companyName + `</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function RefreshDdlBankAlias(ddlBankAlias) {
		let url = "@ddlBankAliasUrl"

		if (ddlBankAlias == ddlFromAliasBank) {
			url = url + "?companyId=" + ddlCompany.val();
		}

		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: url
		})).done(function (response) {
			if (response.succeeded) {
				ddlBankAlias.empty().append(`<option value="">&nbsp</option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
					ddlBankAlias.append(
						`<option
							value="` + data.bankAliasId + `"
							data-bank-name="` + data.bankName + `"
							data-account-no="` + data.accountNo + `"
							data-account-name="` + data.accountName + `">` +
							data.aliasName +
						`</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	function RefreshDdlPartner(partnerId) {
		let ddlPartner = $("#ddlPartner");
		ddlPartner.empty().append(`<option value="">&nbsp</option>`);
		for (let i = 0; i < ddlPartnerDatas.length; i++) {
			const data = ddlPartnerDatas[i];
			const isSelected = partnerId.toLowerCase() == data.partnerId.toLowerCase() ? ` selected` : ``;
			ddlPartner.append(`<option value="` + data.partnerId + `"` + isSelected + `>` + data.partnerName + `</option>`);
		}
	}

	function RefreshDdlCoa(coaId) {
		let ddlCoa = $("#ddlCoa");
		ddlCoa.empty().append(`<option value="">&nbsp</option>`);

		for (let i = 0; i < ddlCoaDatas.length; i++) {
			const data = ddlCoaDatas[i];
			const isSelected = coaId.toLowerCase() == data.coaId.toLowerCase() ? ` selected` : ``;
			ddlCoa.append(`<option value="` + data.coaId + `"` + isSelected + `>` + data.accountCode + ` - ` + data.accountName + `</option>`);
		}
	}

	function RefreshDdlCostCenter(costCenterId) {
		let ddlCostCenter = $("#ddlCostCenter");
		ddlCostCenter.empty().append(`<option value="">&nbsp</option>`);

		for (let i = 0; i < ddlCostCenterDatas.length; i++) {
			const data = ddlCostCenterDatas[i];
			const isSelected = costCenterId.toLowerCase() == data.costCenterId.toLowerCase() ? ` selected` : ``;
			ddlCostCenter.append(`<option value="` + data.costCenterId + `"` + isSelected + `>` + data.costCenterCode + `</option>`);
		}
	}

	function RefreshDdlPostingAccount(postingAccountId) {
		let ddlPostingAccount = $("#ddlPostingAccount");
		postingAccountId = postingAccountId == "" ? ddlCompany.val() : postingAccountId;
		ddlPostingAccount.empty().append(`<option value="">&nbsp</option>`);

		for (let i = 0; i < ddlCompanyDatas.length; i++) {
			const data = ddlCompanyDatas[i];
			const isSelected = postingAccountId.toLowerCase() == data.companyId.toLowerCase() ? ` selected` : ``;
			ddlPostingAccount.append(`<option value="` + data.companyId + `"` + isSelected + `>` + data.companyName + `</option>`);
		}
	}

	async function LoadOutgoingPaymentDetailData(loadOutgoingPaymentId) {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "GET",
			url: "@detailOutgoingPaymentUrl?outgoingPaymentId=" + loadOutgoingPaymentId
		})).done(function (response) {
			if (response.succeeded) {
				$.each(response.obj, function (key, value) {
					if (key == 'isBtnCancelHidden') {
						if (value) {
							btnCancel.hide();
						}
					}

					if (key == 'isCancelable')
						btnCancel.prop('disabled', value);

					if (key == 'transactionNo')
						transactionNo = value;

					let input = $('[bind-name="' + key + '"]');

					if (input.length > 0) {
						let bindTrigger = input.attr('bind-trigger');
						let bindType = input.attr('bind-type');

						if (bindType == 'datetime' && value != null) {
							value = value.split('T')[0];
						}

						input.val(value);

						if (bindTrigger != undefined) {
							input.trigger(bindTrigger);
						}
					}
				});

				setTimeout(() => {
					ddlFromAliasBank.val(response.obj.fromBankAliasId);
					ddlFromAliasBank.trigger('change');
				}, 500);

				$.each(response.obj.outgoingPaymentTaggings, function (key, value) {
					var tagValue = value.tagValue;
					let listTagging = `<span name="tagSpan" 
											 class="badge badge-pill badge-outlined-success font-weight-normal mr-2 mt-2" 
											 style="padding: 0.25em 0.75em;" 
											 data-value="${tagValue}">
											 ${tagValue}
									  </span>`;
					divTag.append($(listTagging));
				});

				$.each(response.obj.outgoingPaymentDetails, function (key, value) {
					let attachments = [];
					$.each(value.outgoingPaymentDetailAttachments, function (cKey, cValue) {
						attachments.push({
							"fileId": cValue.fileId,
							"fileName": cValue.fileName,
							"fileSize": cValue.fileSize,
							"fileUrl": cValue.fileUrl,
							"contentType": cValue.contentType
						});
					});

					gridOutgoingPaymentDetail.api().row.add({
						"id": value.id,
						"invoiceDate": (value.invoiceDate).split('T')[0],
						"partner": {
							"partnerId": value.partnerId,
							"partnerName": value.partnerName
						},
						"description": value.description,
						"coa": {
							"coaId": value.chartOfAccountId,
							"accountCode": `${value.chartOfAccountNo} - ${value.chartOfAccountName}`
						},
						"costCenter": {
							"costCenterId": value.costCenterId,
							"costCenterCode": value.costCenterCode
						},
						"postingAccount": {
							"postingAccountId": value.postingAccountId,
							"postingAccountName": value.postingAccountName
						},
						"amount": value.amount,
						"attachments": attachments
					});

					gridOutgoingPaymentDetail.api().draw();

					totalAmount = totalAmount + value.amount;
				});
				txtTotalAmount.val(fmtMoney(totalAmount));
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	function ValidateAllowModifyDetail() {
		let message = '';

		if (ddlCompany.val() == '')
			message = 'Harap memilih company terlebih dahulu';

		if (indexRowEdit != -1)
			message = "Harap menyelesaikan edit yang belum selesai terlebih dahulu";

		if (message != '') {
			Swal.fire({
				title: "Error",
				text: message,
				icon: "error"
			});

			return false;
		}

		return true;
	}

	function AfterEditDetail(data) {
		$('#dtInvoiceDate').datepicker({
			dateFormat: "yy-mm-dd"
		});
		$('#dtInvoiceDate').datepicker("setDate", data.invoiceDate);

		RefreshDdlPartner(data.partner.partnerId);
		$('#txtDescription').val(data.description);
		RefreshDdlCoa(data.coa.coaId);
		RefreshDdlCostCenter(data.costCenter.costCenterId);
		RefreshDdlPostingAccount(data.postingAccount.postingAccountId);
		$('#txtAmount').val(fmtMoney(data.amount));
	}

	function GetTemporaryData() {
		let temporaryData = {
			"id": gridOutgoingPaymentDetail.api().row(indexRowEdit).data().id,
			"invoiceDate": $('#dtInvoiceDate').datepicker('getDate'),
			"postingAccount": {
				"postingAccountId": $('#ddlPostingAccount').val(),
				"postingAccountName": $('#ddlPostingAccount option:selected').text()
			},
			"partner": {
				"partnerId": $('#ddlPartner').val(),
				"partnerName": $('#ddlPartner option:selected').text()
			},
			"description": $('#txtDescription').val(),
			"coa": {
				"coaId": $('#ddlCoa').val(),
				"accountCode": $('#ddlCoa option:selected').text()
			},
			"costCenter": {
				"costCenterId": $('#ddlCostCenter').val(),
				"costCenterCode": $('#ddlCostCenter option:selected').text()
			},
			"postingAccount": {
				"postingAccountId": $('#ddlPostingAccount').val(),
				"postingAccountName": $('#ddlPostingAccount option:selected').text()
			},
			"amount": parseInt($('#txtAmount').val().replace(/\./g, ""))
		}

		return temporaryData;
	}
</script>