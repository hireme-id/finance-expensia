@using Finance.Expensia.Shared.Enums
@using Finance.Expensia.Shared.Helpers
@{
    var ddlCompanyUrl = Url.Action("RetrieveCompanyDatas", "Company");
    var gridListOutgoingPayment = Url.Action("GetListOutgoingPayment", "OutgoingPayment");
    var statusApproval = Enum.GetValues(typeof(ApprovalStatus));
    var statusList = statusApproval.Cast<ApprovalStatus>().Select(s => s.GetDescription()).ToList();
    var createOutgoingPaymentUrl = Url.Action("Create", "OutgoingPayment", new { area = "Core" });
    var getDownloadList = Url.Action("GetDownloadOutgoingPayment", "OutgoingPayment");
}

<script type="text/javascript">
    var gridOutgoingPayment;
    var currentDraw = 0;
    //Variable for control
    const gridOutgoingPaymentDetail = $('#gridOutgoingPaymentDetail');
    const dtStartDate = $("#dtStartDate"), dtEndDate = $("#dtEndDate");
    const dtsdDownload = $("#dtsdDownload"), dtedDownload = $("#dtedDownload");
    const ddlCompany = $("#ddlCompany"), ddlApprovalStatus = $('#ddlApprovalStatus');
    const txtSearch = $("#txtSearch");
    const vdStartDateDownload = $("#sdmessage"), vdEndDateDownload = $("#edmessage");
    const btnFilter = $("#btnFilter"), btnCreate = $('#btnCreate'), btnReset = $("#btnReset");
    const btnDownload = $("#btnDownload"), btnCancel = $('#btnCancel'), btnloader = $('#btnloader');
    const mdDownloadDetail = $("#mdDownloadDetail");

    const badgeStatus = ['badge-secondary', 'badge-warning', 'badge-success', 'badge-danger', 'badge-light', 'badge-outlined-danger'];

    $(function () {
        OutgoingPaymentManager = new OutgoingPaymentManager();
        OutgoingPaymentManager.InitManagement();
    });

    function OutgoingPaymentManager() {
        return {
            InitManagement: function () {
                this.InitControls();
                this.InitHandlers();
                this.InitValidation();
                this.InitLoad();
            },
            InitControls: function () {
                gridOutgoingPayment = $('#gridOutgoingPayment').DataTable({
                    paging: true,
                    pagingType: "first_last_numbers",
                    ordering: false,
                    autoWidth: false,
                    serverSide: true,
                    ajax: (Object.assign({}, glbBaseRequest, {
                        type: "POST",
                        url: "@gridListOutgoingPayment",
                        data: function (d) {
                            return JSON.stringify({
                                "companyId": ddlCompany.val() == '' ? null : ddlCompany.val(),
                                "startDate": dtStartDate.val() == '' ? null : dtStartDate.val(),
                                "endDate": dtEndDate.val() == '' ? null : dtEndDate.val(),
                                "approvalStatus": ddlApprovalStatus.val() == '' ? null : ddlApprovalStatus.val(),
                                "page": d.start / d.length + 1,
                                "pageSize": d.length,
                                "searchKey": d.search.value
                            });
                        },
                        dataSrc: function (json) {
                            currentDraw = currentDraw + 1;
                            json.draw = currentDraw;
                            json.recordsTotal = json.recordsTotal;
                            json.recordsFiltered = json.recordsTotal;
                            return json.data;
                        },
                    })),
                    columns: [
                        {
                            title: "Transaction Info", 
                            render: function (data, type, row) {
                                var reqDate = fmtDate4(row.requestDate);
                                var elem = `${row.transactionNo} <br /> ${reqDate}`;
                                return elem;
                            },
                        },
                        { title: "Company", data: "companyName" },
                        { title: "Requestor", data: "requestor"},
                        { title: "From Bank Alias", data: "fromBankAlias" },
                        { title: "To Bank Alias", data: "toBankAlias" },
                        { 
                            title: "Total Transaction", render: function (data, type, row) {
                                var totalAmount = fmtMoney(row.totalAmount);
                                return totalAmount;
                            },
                            className: "dt-body-right"
                        },
                        { 
                            title: "Remark",
                            render: function (data, type, row) {
                                var schDate = '';
                                var elem;
                                if (row.scheduledDate != null) {
                                    schDate = fmtDate4(row.scheduledDate);
                                    elem = `<b class="text-nowrap">Scheduled - ${schDate} </b> <br /> ${row.remark}`;
                                }
                                else {
                                    elem = row.remark;
                                }

                                return elem;
                            },
                        },
                        {
                            title: "Status", 
                            render: function (data, type, row) {
                                var statusList = @Html.Raw(Json.Serialize(statusList));
                                var status = statusList[row.approvalStatus];
                                var badgeType = badgeStatus[row.approvalStatus];
                                var bgstatus = `<span class="badge ${badgeType}">${status}</span>`;
                                return bgstatus;
                            }
                        },
                        {
                            title: "Taggings",
                            render: function (data, type, row){
                                var htmltag = '';
                                $.each(row.outgoingPaymentTaggings, function (key, value) {
                                    var tagValue = value.tagValue;
                                    let listTagging = `<span name="tagSpan" class="badge badge-pill badge-outlined-success font-weight-normal mr-2 mb-2" style="padding: 0.25em 0.75em;"  data-value="${tagValue}">${tagValue}
                                                            </span>`;
                                    htmltag += listTagging;
                                });
                                return htmltag;
                            }
                        },
                        {
                            title: "", class: 'text-nowrap',
                            render: function (data, type, row) {
                                let isdisabled = '';
                                let linkedit = '';
                                linkedit = `../Core/OutgoingPayment/Edit/${row.outgoingPaymentId}`;
                                if (row.approvalStatus > 0){
                                    isdisabled = 'adisabled';
                                    linkedit = '#';
                                }
                                let html = `<a href="${linkedit}" class="${isdisabled}" style="color: dimgray; font-size: 17px;"><i class="fas fa-pencil-alt mr-3 ${isdisabled}"></i></a>` +
                                    `<a href="../Core/OutgoingPayment/Detail/${row.outgoingPaymentId}" style="color: dimgray; font-size: 17px;"><i class="fas fa-file-alt"></i></a>`;

                                return html;
                            }
                        }
                    ],
                    layout: {
                        topStart: {
                            pageLength: {
                                menu: [10, 25, 50, 100]
                            }
                        },
                        topEnd: null,
                        bottomStart: 'info',
                        bottom2Start: function () {
                            let toolbar = document.createElement('div');
                            let buttons = '<button class="btn btn-sm btn-outline-primary mr-2" data-toggle="modal" data-target="#mdDownloadDetail">Download Detail</button>'
                            toolbar.innerHTML = buttons;

                            return toolbar;
                        },
                        bottomEnd: 'paging',
                        bottom2End: function () {
                            let toolbar = document.createElement('div');
                            toolbar.classList.add("row");
                            let elem = '<label>Jump to page:</label>' +
                                '<input type="text" id="txtJump" class="form-control form-control-sm pull-right mr-2 ml-2" style="width: 120px;">';
                            toolbar.innerHTML = elem;

                            return toolbar;
                        }
                    }
                });

                dtStartDate.datepicker({
                    dateFormat: 'yy-mm-dd',
                    onSelect: function (selectedDate) {
                        dtEndDate.datepicker("option", "minDate", selectedDate);
                    }
                });

                dtEndDate.datepicker({
                    dateFormat: 'yy-mm-dd',
                    onSelect: function (selectedDate) {
                        dtStartDate.datepicker("option", "maxDate", selectedDate);
                    }
                });

                dtsdDownload.datepicker({
                    dateFormat: 'yy-mm-dd',
                    beforeShow: function (input, inst) {
                        var modal = $(input).closest(".modal");
                        var datepicker = inst.dpDiv;

                        setTimeout(function () {
                            var offset = $(input).offset();
                            var modalTop = modal.offset().top;
                            var inputHeight = $(input).outerHeight();

                            var top = offset.top - modalTop + inputHeight;

                            datepicker.css({
                                top: top + 'px',
                                left: offset.left + 'px'
                            });
                        }, 0);
                    },
                    onSelect: function (selectedDate) {
                        dtedDownload.datepicker("option", "minDate", selectedDate);
                    }
                });

                dtedDownload.datepicker({
                    dateFormat: 'yy-mm-dd',
                    beforeShow: function (input, inst) {
                        var modal = $(input).closest(".modal");
                        var datepicker = inst.dpDiv;

                        setTimeout(function () {
                            var offset = $(input).offset();
                            var modalTop = modal.offset().top;
                            var inputHeight = $(input).outerHeight();

                            var top = offset.top - modalTop + inputHeight;

                            datepicker.css({
                                top: top + 'px',
                                left: offset.left + 'px'
                            });
                        }, 0);
                    },
                    onSelect: function (selectedDate) {
                        dtsdDownload.datepicker("option", "maxDate", selectedDate);
                    }
                });
            },
            InitHandlers: function () {
                var debouncedAjaxRequest;
                $('#txtJump').on('keyup change', function () {
                    if (debouncedAjaxRequest) {
                        clearTimeout(debouncedAjaxRequest);
                    }

                    debouncedAjaxRequest = setTimeout(function () {
                        if ($('#txtJump').val() != '') {
                            var pageNumber = parseInt($('#txtJump').val());
                            if (!isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= gridOutgoingPayment.page.info().pages) {
                                gridOutgoingPayment.page(pageNumber - 1).draw('page');
                            } else {
                                alert('Invalid page number');
                            }
                        }
                    }, 1000);
                });

                gridOutgoingPayment.on('draw', function () {
                    $('#gridOutgoingPayment tbody tr').each(function () {
                        var $taggingsCell = $(this).find('td').eq(8);
                        if ($taggingsCell.text().trim() === '') {
                            $taggingsCell.addClass('small-width').removeClass('large-width');
                        } else {
                            $taggingsCell.addClass('large-width').removeClass('small-width');
                        }
                    });
                });

                btnFilter.click(function () {
                    gridOutgoingPayment.search(txtSearch.val()).draw();
                })

                btnCreate.click(function () {
                    window.location.href = '@createOutgoingPaymentUrl';
                })

                btnReset.click(function () {
                    RefreshDdlCompany();
                    ddlApprovalStatus.val('').change();
                    txtSearch.val('');
                    dtStartDate.val('');
                    dtStartDate.datepicker("option", "maxDate", null);
                    dtEndDate.val('');
                    dtEndDate.datepicker("option", "minDate", null);
                    gridOutgoingPayment.search(txtSearch.val()).draw();
                })

                btnDownload.click(function () {
                    if (dtsdDownload.val() != '' && dtedDownload.val() == '') {
                        vdEndDateDownload.show();
                        vdStartDateDownload.hide();
                        dtedDownload.addClass('error-input');
                        dtsdDownload.removeClass('error-input');
                    }
                    else if (dtedDownload.val() != '' && dtsdDownload.val() == '') {
                        vdStartDateDownload.show();
                        vdEndDateDownload.hide();
                        dtsdDownload.addClass('error-input');
                        dtedDownload.removeClass('error-input');
                    }
                    else if (dtsdDownload.val() == '' && dtedDownload.val() == '') {
                        vdEndDateDownload.show();
                        vdStartDateDownload.show();
                        dtsdDownload.addClass('error-input');
                        dtedDownload.addClass('error-input');
                    }
                    else {
                        btnDownload.prop('disabled', true);
                        btnCancel.prop('disabled', true);
                        btnloader.removeClass("d-none");
                        dtsdDownload.removeClass('error-input');
                        dtedDownload.removeClass('error-input');
                        vdStartDateDownload.hide();
                        vdEndDateDownload.hide();
                        
                        DownloadOutgoingPayment();
                    }
                })
            },
            InitValidation: function () {
            },
            InitLoad: function () {
                SetFormView();
                RefreshDdlCompany();
            }
        }
    };

    function DownloadOutgoingPayment() {
        $.ajax(Object.assign({}, glbBaseRequest, {
            method: "POST",
            url: "@getDownloadList",
            xhrFields: {
                responseType: 'blob'
            },
            data: JSON.stringify({
                "startDate": dtsdDownload.val(),
                "endDate": dtedDownload.val()
            })
        })).done(function (data) {
            var a = document.createElement('a');
            var url = window.URL.createObjectURL(data);
            a.href = url;
            a.download = "OutgoingPayment.xlsx";
            document.body.append(a);
            a.click();
            a.remove();
            window.URL.revokeObjectURL(url);
            ResetDownloadForm();
        }).fail(function (jqXHR, textStatus, errorThrown) {
            ResetDownloadForm();
            Swal.fire({
                title: "Error",
                text: `Gagal untuk download`,
                icon: "error"
            });
        });;
    }

    function ResetDownloadForm(){
        mdDownloadDetail.modal('hide');

        btnDownload.prop('disabled', false);
        btnCancel.prop('disabled', false);
        btnloader.addClass("d-none");
        dtsdDownload.val('');
        dtedDownload.val('');
    }

    function SetFormView() {
        $('#gridOutgoingPayment tbody tr').each(function () {
            var $taggingsCell = $(this).find('td').eq(8);
            if ($taggingsCell.text().trim() === '') {
                $taggingsCell.addClass('small-width').removeClass('large-width');
            } else {
                $taggingsCell.addClass('large-width').removeClass('small-width');
            }
        });
    }
    
    function RefreshDdlCompany() {
        $.ajax(Object.assign({}, glbBaseRequest, {
            method: "POST",
            url: "@ddlCompanyUrl"
        })).done(function (response) {
            if (response.succeeded) {
                ddlCompany.empty().append(`<option value="">&nbsp</option>`);

                for (let i = 0; i < response.obj.length; i++) {
                    const data = response.obj[i];
                    ddlCompany.append(`<option value="` + data.companyId + `">` + data.companyName + `</option>`);
                }
            }
            else {
                Swal.fire({
                    title: "Error",
                    text: response.message,
                    icon: "error"
                });
            }
        });
    }
</script>