@using Finance.Expensia.Shared.Enums
@using Finance.Expensia.Shared.Helpers
@{
    var ddlBankAliasUrl = Url.Action("RetrieveFromBankAlias", "BankAlias");
    var gridListMailbox = Url.Action("GetListInbox", "Mailbox");
    var statusApproval = Enum.GetValues(typeof(ApprovalStatus));
    var statusList = statusApproval.Cast<ApprovalStatus>().Select(s => s.GetDescription()).ToList();
}

<script type="text/javascript">
    var gridOutgoingPayment;
    var currentDraw = 0;
    let amount = 0;
    
    //Variable for control
    const gridMailbox = $('#gridMailbox');
    const dtStartDate = $("#dtStartDate"), dtEndDate = $("#dtEndDate");
    const ddlFromBankAlias = $("#ddlFromBankAlias");
    const txtSearch = $("#txtSearch");
    const btnFilter = $("#btnFilter");

    $(function () {
        MailboxManager = new MailboxManager();
        MailboxManager.InitManagement();
    });

    function MailboxManager() {
        return {
            InitManagement: function () {
                this.InitControls();
                this.InitHandlers();
                this.InitValidation();
                this.InitLoad();
            },
            InitControls: function () {
                gridMailbox.DataTable({
                    paging: true,
                    pagingType: "first_last_numbers",
                    ordering: false,
                    autoWidth: false,
                    serverSide: true,
                    ajax: (Object.assign({}, glbBaseRequest, {
                        type: "POST",
                        url: "@gridListMailbox",
                        data: function (d) {
                            return JSON.stringify({
                                "fromBankAliasId": ddlFromBankAlias.val() == '' ? null : ddlFromBankAlias.val(),
                                "startDate": dtStartDate.val() == '' ? null : dtStartDate.val(),
                                "endDate": dtEndDate.val() == '' ? null : dtEndDate.val(),
                                "page": d.start / d.length + 1,
                                "pageSize": d.length,
                                "searchKey": d.search.value
                            });
                        },
                        dataSrc: function (json) {
                            currentDraw = currentDraw + 1;
                            json.draw = currentDraw;
                            json.recordsTotal = json.recordsTotal;
                            json.recordsFiltered = json.recordsTotal;

                            return json.data;
                        },
                    })),
                    columns: [
                        {
                            title: '<input id="selectAll" type="checkbox" />', render: function (data, type, row, meta) {
                                var ischecked = '';
                                var storedData = localStorage.getItem('selectedItems');
                                var parsedData = JSON.parse(storedData);
                                if (Array.isArray(parsedData)) {
                                    if (parsedData.includes(row.outgoingPaymentId)) {
                                        ischecked = 'checked';
                                    }
                                }

                                return `<input type="checkbox" class="checkbox-all" data-id="${row.outgoingPaymentId}" data-amount="${row.totalAmount}" ${ischecked}/>`;
                            },

                            orderable: false
                        },
                        { title: "Transaction No", data: "transactionNo" },
                        {
                            title: "Request Date",
                            render: function (data, type, row) {
                                return fmtDate(row.requestDate);
                            }
                        },
                        { title: "Requestor", data: "requestor" },
                        { title: "Total Transaction", data: "totalAmount" },
                        { title: "Remark", data: "remark" },
                        { title: "From Bank Alias", data: "fromBankAliasName" },
                        { title: "To Bank Alias", data: "toBankAliasName" },
                        { 
                            title: "Status",
                            render: function (data, type, row) {
                                var statusList = @Html.Raw(Json.Serialize(statusList));
                                var status = statusList[row.approvalStatus];
                                return status;
                            }
                        },
                        {
                            title: "", render: function (data, type, row) {
                                let html = `<a href="../Core/Mailbox/Approval/${row.outgoingPaymentId}" style="color: dimgray; font-size: 18px;"><i class="fas fa-file-alt"></i></a>`;

                                return html;
                            }
                        },
                    ],
                    layout: {
                        topStart: {
                            pageLength: {
                                menu: [10, 25, 50, 100]
                            }
                        },
                        topEnd: null,
                        bottomStart: 'info',
                        bottom2Start: function () {
                            let toolbar = document.createElement('div');
                            toolbar.classList.add("row");
                            let buttons = '<input type="text" class="form-control w-50 mr-2" id="txttotalamount" placeholder="Total Amount" disabled />' +
                                '<button class="btn btn-sm btn-outline-danger mr-2">Reject All</button>' +
                                '<button type="button"  class="btn btn-sm btn-outline-success" data-toggle="modal" data-target="#filterModal">Approve All</button>'
                            toolbar.innerHTML = buttons;

                            return toolbar;
                        },
                        bottomEnd: 'paging',
                        bottom2End: function () {
                            let toolbar = document.createElement('div');
                            toolbar.classList.add("row");
                            toolbar.classList.add("mb-4");
                            let elem = '<label>Jump to page:</label>' +
                                '<input type="text" id="txtJump" class="form-control form-control-sm pull-right mr-2 ml-2" style="width: 120px;">';
                            toolbar.innerHTML = elem;

                            return toolbar;
                        }
                    }
                });

                dtStartDate.datepicker({
                    dateFormat: 'yy-mm-dd',
                    onSelect: function (selectedDate) {
                        dtEndDate.datepicker("option", "minDate", selectedDate);
                    }
                });

                dtEndDate.datepicker({
                    dateFormat: 'yy-mm-dd',
                    onSelect: function (selectedDate) {
                        dtStartDate.datepicker("option", "maxDate", selectedDate);
                    }
                });
            },
            InitHandlers: function () {
                var debouncedAjaxRequest;
                $('#txtJump').on('keyup change', function () {
                    if (debouncedAjaxRequest) {
                        clearTimeout(debouncedAjaxRequest);
                    }

                    debouncedAjaxRequest = setTimeout(function () {
                        if ($('#txtJump').val() != '') {
                            var pageNumber = parseInt($('#txtJump').val());
                            if (!isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= gridMailbox.DataTable().page.info().pages) {
                                gridMailbox.DataTable().page(pageNumber - 1).draw('page');
                            } else {
                                alert('Invalid page number');
                            }
                        }
                    }, 1000);
                });

                $('#selectAll').change(function () {
                    let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];
                    $('.checkbox-all').prop('checked', this.checked);
                    if (this.checked) {
                        $('.checkbox-all:checked').map(function () {
                            selectedItems.push($(this).data('id'));
                            amount = amount + parseInt($(this).data('amount'));
                        }).get();
                    }
                    else {
                        $('.checkbox-all').not(':checked').each(function () {
                            selectedItems = selectedItems.filter(item => item !== $(this).data('id'));
                            amount = amount - parseInt($(this).data('amount'));
                        }).get();
                    }
                    $("#txttotalamount").val(fmtMoney(amount));
                    localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
                });

                $(document).on('change', '.checkbox-all', function () {
                    let id = $(this).data('id');
                    let selectedItems = JSON.parse(localStorage.getItem('selectedItems')) || [];
                    if ($(this).prop("checked") == true) {
                        amount = amount + parseInt($(this).data('amount'));
                        selectedItems.push(id);
                    }
                    else if ($(this).prop("checked") == false) {
                        amount = amount - $(this).data('amount');
                        selectedItems = selectedItems.filter(item => item !== id);
                    }
                    localStorage.setItem('selectedItems', JSON.stringify(selectedItems));
                    $("#txttotalamount").val(fmtMoney(amount));
                });

                btnFilter.click(function () {
                    gridMailbox.DataTable().search(txtSearch.val()).draw();
                })
            },
            InitValidation: function () {
            },
            InitLoad: function () {
                localStorage.removeItem("selectedItems");
                RefreshDdlFromAliasBank();
            }
        }
    };

    function RefreshDdlFromAliasBank() {
        $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
            url: "@ddlBankAliasUrl"
		})).done(function (response) {
			if (response.succeeded) {
                ddlFromBankAlias.empty().append(`<option value=""></option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
                    ddlFromBankAlias.append(
						`<option
							value="` + data.bankAliasId + `"
							data-bank-name="` + data.bankName + `"
							data-account-no="` + data.accountNo + `"
							data-account-name="` + data.accountName + `"
							>` + data.aliasName +
						`</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
    }
</script>