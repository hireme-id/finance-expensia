@using Finance.Expensia.Shared.Enums;
@using Finance.Expensia.Shared.Helpers;
@{
	var ddlCompanyUrl = Url.Action("RetrieveCompanyDatas", "Company");
	var ddlBankAliasUrl = Url.Action("RetrieveBankAlias", "BankAlias");
	var ddlPartnerUrl = Url.Action("RetrievePartner", "Partner");
	var ddlCoaUrl = Url.Action("RetrieveCoa", "Coa");
	var ddlCostCenterUrl = Url.Action("RetrieveCostCenter", "CostCenter");
	var downloadFileUrl = Url.Action("DownloadFile", "Storage");
	var gridDetailOutgoingPayment = Url.Action("GetDetailOutgoingPayment", "OutgoingPayment");
	var doActionWorkflowUrl = Url.Action("DoActionApproval", "Mailbox");
	var inboxHomeUrl = Url.Action("Index", "Mailbox", new { area = "Core" });
}

<script type="text/javascript">
	//Variable for control
	const gridOutgoingPaymentDetail = $('#gridOutgoingPaymentDetail');
	const dtRequestDate = $("#dtRequestDate"), dtScheduledDate = $("#dtScheduledDate");
	const ddlCompany = $("#ddlCompany"), ddlFromAliasBank = $("#ddlFromAliasBank"), ddlToAliasBank = $("#ddlToAliasBank");
	const ddlExpectedTransfer = $("#ddlExpectedTransfer"), txtRequestor = $("#txtRequestor"), txtRemark = $("#txtRemark");
	const txtTransactionNo = $("#txtTransactionNo");
	const txtDocumentStatus = $("#txtDocumentStatus"), txtTotalAmount = $("#txtTotalAmount"); txtFromBankName = $("#txtFromBankName");
	const txtToBankName = $("#txtToBankName");
	const btnApprove = $("#btnApprove"), btnReject = $("#btnReject");

	let indexRowEdit = -1;
	let ddlPartnerDatas, ddlCoaDatas, ddlCostCenterDatas;
	let totalAmount = 0;

	$(function () {
		ApprovalManager = new ApprovalManager();
		ApprovalManager.InitManagement();
	});

	function ApprovalManager() {
		return {
			InitManagement: function () {
				this.InitControls();
				this.InitHandlers();
				this.InitValidation();
				this.InitLoad();
			},
			InitControls: function () {
				gridOutgoingPaymentDetail.dataTable({
					ordering: false,
					paging: false,
					searching: false,
					info: false,
					scrollX: true,
					initComplete: function (settings, json) {
						$('.dt-scroll-head').css({ visibility: 'collapse' });
					},
					language: {
						emptyTable: 'Belum ada data'
					},
					columns: [
						{
							data: "invoiceDate",
							title: "Date",
							type: "date",
							width: "120px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div class="input-group">
													<input type="text" class="form-control" id="dtInvoiceDate" autocomplete="off" value=` + data.toISOString().split('T')[0] + ` disabled>
													<div class="input-group-append">
														<span class="input-group-text">
															<i class="fa fa-calendar"></i>
														</span>
													</div>
												</div>`);
								}

								return new Date(data).toISOString().split('T')[0];
							}
						},
						{
							data: "partner",
							title: "Partner",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
														<select class="form-control" id="ddlPartner" disabled></select>
												</div>`);
								}

								return data.partnerName;
							}
						},
						{
							data: "description",
							title: "Description",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
														<input type="text" class="form-control" id="txtDescription" value="` + data + `" disabled/>
												</div>`);
								}

								return data;
							}
						},
						{
							data: "coa",
							title: "CoA",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
														<select class="form-control" id="ddlCoa" disabled></select>
												</div>`);
								}

								return data.accountCode
							}
						},
						{
							data: "costCenter",
							title: "Cost Center",
							width: "200px",
							render: function (data, type, row, meta) {
								if (meta.row == indexRowEdit) {
									return (
										`<div>
														<select class="form-control" id="ddlCostCenter" disabled></select>
												</div>`);
								}

								return data.costCenterCode
							}
						},
						{
							data: "amount",
							title: "Amount",
							width: "150px",
							render: function (data, type, row, meta) {
								//totalAmount = totalAmount + data;

								if (meta.row == indexRowEdit) {
									return (
										`<div>
												<input type="text" class="form-control" id="txtAmount" value="` + data + `" disabled/>
											</div>`);
								}

								return data;
							}
						},
						{
							data: "attachments",
							title: "File",
							width: "200px",
							render: function (data, type, row, meta) {
								if (Array.isArray(data)) {
									let badge = ``;

									data.forEach(function (e, i, a) {
										badge = badge +
											`<span class="badge badge-success mr-1 mb-1 p-0">
														<a class="btn btn-xs text-white">
															<span
																class="download-file"
																data-file-url="` + e.fileUrl + `"
																data-content-type="` + e.contentType + `"
																data-file-name="` + e.fileName + `">` +
											e.fileName +
											`</span>
														</a>`;

										badge = badge +
											`</span>`;
									});

									return badge + `</div>`;
								}

								return ``;
							}
						},

					]
				});

				dtRequestDate.datepicker({
					dateFormat: "yy-mm-dd",
					disabled: true
				});

				dtScheduledDate.datepicker({
					dateFormat: "yy-mm-dd",
					minDate: new Date()
				});
			},
			InitHandlers: function () {
				ddlCompany.on("change", function (e) {
					RefreshDdlBankAlias(ddlFromAliasBank);
					LoadDdlPartnerData();
					LoadDdlCoaData();
					LoadDdlCostCenterData();

					$(this).attr("disabled", true);
				});

				ddlFromAliasBank.add(ddlToAliasBank).on("change", function (e) {
					const ddl = $(this);
					const descriptorControl = $(ddl.attr("descriptor-control"));
					const optionSelected = ddl.find(':selected');
					const bankName = optionSelected.attr("data-bank-name");
					const accountNo = optionSelected.attr("data-account-no");
					const accountName = optionSelected.attr("data-account-name");

					descriptorControl.val(
						`Bank Name : ` + bankName + `
Account Name : ` + accountName + `
Account No : ` + accountNo);
				});

				gridOutgoingPaymentDetail.on("click", "td .download-file", function (e) {
					let $el = $(this);

					let request = JSON.parse(JSON.stringify(glbBaseRequest));
					request.method = "POST";
					request.url = "@downloadFileUrl";
					request.processData = false;
					request.contentType = false;
					request.xhrFields = {
						responseType: 'blob'
					};
					request.data = JSON.stringify({
						fileName: $el.attr('data-file-name'),
						fileUrl: $el.attr('data-file-url'),
						contentType: $el.attr('data-content-type')
					});

					// delete request.headers["Content-Type"];

					$.ajax(request).done(function (data, textStatus, jqXHR) {
						var filename = $el.attr('data-file-name');
						var blob = new Blob([data], { type: $el.attr('data-content-type') });
						var a = document.createElement('a');
						a.href = window.URL.createObjectURL(blob);
						a.download = filename;
						document.body.appendChild(a);
						a.click();
						document.body.removeChild(a);
						window.URL.revokeObjectURL(a.href);
					});
				});

				btnApprove.add(btnReject).on('click', function (e) {
					let title = $(this)[0].id == btnApprove[0].id ? "Approve" : "Reject";
					let confirmButtonText = $(this)[0].id == btnApprove[0].id ? "Approve" : "Reject";
					Swal.fire({
						title: title,
						html: "Apakah anda yakin ingin melanjutkan proses ini?",
						showCancelButton: true,
						confirmButtonText: confirmButtonText,
						confirmButtonColor: "#D92D20",
						customClass: {
							actions: 'my-actions',
							cancelButton: 'order-1 right-gap',
							confirmButton: 'order-2',
						},
						icon: "warning"
					}).then(async (result) => {
						if (result.isConfirmed) {
							$.ajax(Object.assign({}, glbBaseRequest, {
								method: "POST",
								url: "@doActionWorkflowUrl",
								data: JSON.stringify({
									"transactionNo": txtTransactionNo.val(),
									"workflowAction": $(this)[0].id == btnApprove[0].id ? "@WorkflowAction.Approve.GetDescription()" : "@WorkflowAction.Reject.GetDescription()"
								}),
								contentType: "application/json"
							})).done(function (response) {
								if (response.succeeded) {
									Swal.fire({
										title: "Success",
										text: response.message,
										icon: "success"
									}).then(() => {
										window.location.href = "@inboxHomeUrl";
									});
								}
								else {
									Swal.fire({
										title: "Error",
										text: response.message,
										icon: "error"
									});
								}
							});
						}
					});
				});
			},
			InitValidation: function () {
			},
			InitLoad: async function () {
				await RefreshDdlCompany();
				await RefreshDdlBankAlias(ddlToAliasBank);
				await LoadOutgoingPaymentDetailData();
				SetFormForView();
			}
		}
	};

	function SetFormForView() {
		$('input:not(:disabled)').add('select:not(:disabled)').attr('disabled', true);
	}

	async function LoadDdlPartnerData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlPartnerUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlPartnerDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function LoadDdlCoaData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCoaUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlCoaDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function LoadDdlCostCenterData() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCostCenterUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlCostCenterDatas = response.obj;
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function RefreshDdlCompany() {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlCompanyUrl"
		})).done(function (response) {
			if (response.succeeded) {
				ddlCompany.empty().append(`<option value=""></option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
					ddlCompany.append(`<option value="` + data.companyId + `">` + data.companyName + `</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function RefreshDdlBankAlias(ddlBankAlias) {
		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "POST",
			url: "@ddlBankAliasUrl" + "?companyId=" + ddlCompany.val()
		})).done(function (response) {
			if (response.succeeded) {
				ddlBankAlias.empty().append(`<option value=""></option>`);

				for (let i = 0; i < response.obj.length; i++) {
					const data = response.obj[i];
					ddlBankAlias.append(
						`<option
								value="` + data.bankAliasId + `"
								data-bank-name="` + data.bankName + `"
								data-account-no="` + data.accountNo + `"
								data-account-name="` + data.accountName + `"
								>` + data.aliasName +
						`</option>`);
				}
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}

	async function LoadOutgoingPaymentDetailData() {
		var pathArray = window.location.pathname.split('/');

		await $.ajax(Object.assign({}, glbBaseRequest, {
			method: "GET",
			url: "@gridDetailOutgoingPayment" + "?outgoingPaymentId=" + pathArray[pathArray.length - 1]
		})).done(function (response) {
			if (response.succeeded) {
				$.each(response.obj, function (key, value) {
					let input = $('[bind-name="' + key + '"]');

					if (input.length > 0) {
						let bindTrigger = input.attr('bind-trigger');
						let bindType = input.attr('bind-type');

						if (bindType == 'datetime') {
							value = value.split('T')[0];
						}

						input.val(value);

						if (bindTrigger != undefined) {
							input.trigger(bindTrigger);
						}
					}
				});

				setTimeout(() => {
					ddlFromAliasBank.val(response.obj.fromBankAliasId);
					ddlFromAliasBank.trigger('change');
				}, 500);

				$.each(response.obj.outgoingPaymentDetails, function (key, value) {
					let attachments = [];
					$.each(value.outgoingPaymentDetailAttachments, function (cKey, cValue) {
						attachments.push({
							"fileId": cValue.fileId,
							"fileName": cValue.fileName,
							"fileSize": cValue.fileSize,
							"fileUrl": cValue.fileUrl,
							"contentType": cValue.contentType
						});
					});

					gridOutgoingPaymentDetail.api().row.add({
						"id": value.id,
						"invoiceDate": new Date(value.invoiceDate),
						"partner": {
							"partnerId": value.partnerId,
							"partnerName": value.partnerName
						},
						"description": value.description,
						"coa": {
							"coaId": value.chartOfAccountId,
							"accountCode": value.chartOfAccountNo
						},
						"costCenter": {
							"costCenterId": value.costCenterId,
							"costCenterCode": value.costCenterCode
						},
						"amount": value.amount,
						"attachments": attachments
					});

					gridOutgoingPaymentDetail.api().draw();

					txtTotalAmount.val(totalAmount);
				});
			}
			else {
				Swal.fire({
					title: "Error",
					text: response.message,
					icon: "error"
				});
			}
		});
	}
</script>